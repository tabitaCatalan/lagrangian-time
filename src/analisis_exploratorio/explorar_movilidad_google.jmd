
---
title: Análisis exploratorio de los datos de movilidad de Google
author: Tabita Catalán
date: 29 de octubre de 2020
---


# Introducción

Google ha puesto a disposición de la comunidad datos
anonimizados que usan en Google Maps, con el fin de
ayudar en la toma de decisiones relacionadas a la pandemia
por Covid-19. Estos datos están disponibles durante el
desarrollo de la pandemia
[aquí](https://www.google.com/covid19/mobility/).

Se estudia los datos de Chile correspondientes a la
Región Metropolitana de Santiago. El archivo usado
es `MovilidadGoogleSantiago.csv`, en la carpeta [data](../../data/).

# Leer los datos
Usaremos el paquete **TimeSeries.jl**. Leemos los datos y los graficamos.
```{julia; fig_ext=".svg"}
using TimeSeries, Plots

csv_google = "..\\..\\data\\MovilidadGoogleSantiago.csv"
mov_google = readtimearray(csv_google; delim = ',')
numero_dias = length(timestamp(mov_google))

plot(mov_google[:recreacion, :compras, :parques, :transporte, :trabajo, :hogar])
```
## Correción de la línea base

Notamos que la movilidad de referencia considerada era el
promedio de las 5 semanas entre el 3 de enero y el 6 de
febrero. Esa no es una buena línea de referencia para Chile,
puesto que esa fecha corresponde a las vacaciones.
Para corregirlo hacemos lo siguiente:

Supongamos lo siguiente:
- La línea base es alguna cantidad desconocida $x_0$ correspondiente a un día 0.
- Se conoce $p_i$, el porcentaje de variación de esa cantidad, correspondiente al día $i$, de tal manera que $x_i = (1+ \frac{p_i}{100})x_0$. Notamos que, puesto que no conocemos $x_0$, tampoco conocemos $x_i$.

Nos interesa encontrar valores $p_i'$ que sean variaciones
con respecto a una nueva línea base $x_0'$, es decir, que
$x_i = (1+\frac{p_i'}{100})x_0'$. Si suponemos que conocemos
$p$ tal que $x_0' = (1+\frac{p}{100})x_0$, entonces un
cálculo simple

$$
x_i = \left(1+ \frac{p_i}{100}\right)x_0
= \frac{1+ \frac{p_i}{100}}{1+ \frac{p}{100}} x_0'
= \left( 1 + \frac{\frac{p_i - p}{100}}{1 + \frac{p}{100}}\right)x_0' = \left(1 + \frac{1}{100} \cdot \frac{p_i - p}{1 + \frac{p}{100}}\right) x_0'
$$
nos dice que
$$p_i' = \frac{p_i-p}{1+\frac{p}{100}}.$$

Los valores base usados fueron el promedio de la semana del
9-15 de marzo; la única normal. Solo se consideraron los días
laborales (lunes-viernes).

La siguiente tabla muestra los porcentajes de variación con respecto al valor desconocido de enero-febrero.

```julia; term=true
mov_google[24:28]
```
Calculamos los promedios para cada columna
```julia
p = values(sum(mov_google[24:28]) ./5)
```
Esto nos permite corregir los datos.
```julia
mov_google_corregido = (mov_google .- p) ./(1 .+ p./100);
```
Para comparar las dos series creamos la función `plot_comparar_movilidad`.
```{julia; fig_ext=".svg"}
"""
    plot_comparar_movilidad!(ts_mov1, ts_mov2; title = "")
Grafica dos series de tiempo de los datos de movilidad de Google,
la primera de ellas con mayor transparencia.
"""
function plot_comparar_movilidad!(a_plot, ts_mov1, ts_mov2)
    ambientes = colnames(ts_mov1)
    for i in 1:length(ambientes)
        plot!(a_plot, ts_mov1[ambientes[i]],
            alpha = 0.2,
            label = :none,
            color = i
        )
        plot!(a_plot, ts_mov2[ambientes[i]],
            color = i
        )
    end
    a_plot
end
ap = plot(title = "Comparación entre serie original y corregida")
plot_comparar_movilidad!(ap, mov_google, mov_google_corregido)
ap

```
El color más intenso corresponde a los datos corregidos.
# Suavizar datos

Calcularemos una media móvil de 3 días de los datos.
```{julia; fig_ext=".svg"}
using Statistics

window = 7
mov_google_movmean = moving(mean, mov_google_corregido, window)

ap = plot(title = "Comparación entre serie corregida y media móvil ($window días)")
plot_comparar_movilidad!(ap, mov_google_corregido, mov_google_movmean)
ap
```
# Agregar datos de cuarentenas
Agregaremos barras grises para mostrar la cantidad de personas en cuarentena.
[] Corregir, debería ser `frac::TimeSeries`.
```julia
include("..\\epidemic_model\\ReadCuarentenaData.jl")
csv_cuarentena = "..\\..\\data\\CuarentenasRMv2.csv"
eod_db = "..\\..\\data\\EOD2012-Santiago.db"
pobla_query = "..\\epidemic_model\\query-poblacion-clase.sql"

frac_cuarentena, dias_cuarentena = obtener_frac_cuarentena_from_csv(
    csv_cuarentena, eod_db, pobla_query,
    delim = ',', tramos = false, modo = :cuarentena
)
numero_dias = length(frac_cuarentena)
csv_paso_a_paso = "..\\..\\data\\paso_a_paso_por_comunas.csv"
frac_PaP, dias_PaP = obtener_frac_cuarentena_from_csv(
    csv_paso_a_paso, eod_db, pobla_query, tramos = false,
    delim = ',', modo = :PaP
);
```
Los datos de movilidad de google están disponibles desde el 2020-02-24 hasta el 2020-10-18
```julia; term=true
timestamp(mov_google_movmean)[1]
timestamp(mov_google_movmean)[end]
```
Los datos de cuarentenas están disponibles desde el 2020-03-13 hasta el 2020-07-18 (128 días).
```julia;term=true
dias_cuarentena[1]
dias_cuarentena[end]
```
Los datos del plan paso a paso están disponibles a partir del día 2020-07-19.
Unimos todo en un único array.
```julia
frac_outbreak = [frac_cuarentena; frac_PaP]
dias_outbreak = [dias_cuarentena; dias_PaP];
```

Vemos que hay 18 días entre ambos los datos de cuarentenas y los datos de Google.
```julia;term=true
dias_cuarentena[1] - timestamp(mov_google_movmean)[1]
timestamp(mov_google_movmean)[end] - dias_cuarentena[end]

```


Hacemos una sfunción para graficar tiras grises. La intensidad del color depende
de la fracción de personas en cuarentena ese día.
```julia
function plot_strip!(a_plot,dia::Date, frac_dia)
    vspan!(a_plot,[dia,dia+Day(1)], alpha = frac_dia, color = :black, label = :none)
end
```
# Fechas Clave
Mostramos algunas fechas que fueron significativas en cuanto a la cantidad de
personas que fueron agregadas o quitadas a la cuarentenas, o porque marcan el
inicio de algo nuevo, etc.

```{julia; fig_ext=".svg"}}
#fechas_clave = [Date(2020,3,16), Date(2020,3,26), Date(2020,4,16),Date(2020,4,23), Date(2020,4,30), Date(2020,5,5), Date(2020,5,8), Date(2020,5,15), Date(2020,7,27), 2020-10-18]
fechas_clave = [Date(2020,3,16), Date(2020,3,26), Date(2020,5,8), Date(2020,5,15), Date(2020,7,27), Date(2020,10,18)]


function plot_fechas_clave_cuarentenas!(a_plot; label = "Fechas clave", color = :black)
    vline!(a_plot, fechas_clave,
        color = color, label = label
    )
end

begin
    a_plot = plot(title = "Fechas clave")
    a_plot = plot( timestamp(mov_google_movmean),
        [zeros(21); frac_outbreak[1:220]],
        color = :gray,
        fill = (0, 1., :gray),
        label = "Fracción personas en cuarentena",
        grid = false
    )
    plot_fechas_clave_cuarentenas!(a_plot)
    a_plot
end
```
Graficamos los datos de Google con las cuarentenas de fondo.
```{julia; fig_ext=".svg"}
begin
    #a_plot = plot(title = "Media movil de $window días de los datos de Google y cuarentenas")
    a_plot = plot( timestamp(mov_google_movmean),
        [zeros(21); frac_outbreak[1:220]],
        color = :gray,
        fill = (0, 1., :gray),
        label = :none,
        grid = false
    )
    plot_fechas_clave_cuarentenas!(a_plot, label = :none)

    tx = twinx(a_plot)

    ambientes = colnames(mov_google_movmean)

    for i in 1:length(ambientes)
        plot!(tx, mov_google_movmean[ambientes[i]],
            color = i
        )
    end
    a_plot
end
```

# Parametrizar los datos
Ahora quiero estudiar el comportamiento en ciertas zonas
```julia;term=true
fechas_clave[2:end]-fechas_clave[1:end-1]
```
En base a eso definimos 5 bloques: cada uno limitado por dos fechas claves.

```julia
function calcular_bloque(i)
    timestamp(mov_google_movmean[fechas_clave[i]:Dates.Day(1):fechas_clave[i+1]])
end

bloq1 = calcular_bloque(1)
bloq2 = calcular_bloque(2)
bloq3 = calcular_bloque(3)
bloq4 = calcular_bloque(4)
bloq5 = calcular_bloque(5);
```

Necesito una función para calcular una aproximación lineal.
```julia
function get_xy(bloq::Vector{Date}, ambiente)
    y = values(mov_google_movmean[bloq][ambiente])
    x = 1:length(bloq)
    x,y
end
"""
Devuelve coeficientes a,b de tal forma que a*x + b aproxima a y.
"""
function linear_regression(x,y)
    n = length(x)
    M = reshape([ones(n); x], (n,2))
    v = M\y
    v[2], v[1]
end

bloques = [bloq1, bloq2, bloq3, bloq4, bloq5]
K = 5

function calcular_aprox(ambiente, K)
    A = zeros(K)
    B = zeros(K)
    X = []
    for i in 1:K
        x, y = get_xy(bloques[i], ambiente)
        a, b = linear_regression(x,y)
        A[i] = a
        B[i] = b
        push!(X,x)
    end
    X, A, B
end
```
Esto nos permite calcular un aproximación lineal por trozos.
```{julia; fig_ext=".svg"}
X, A, B = calcular_aprox(:trabajo, K)
begin
    a_plot2 = plot(mov_google_movmean[:trabajo], alpha = 0.3)
    plot_fechas_clave_cuarentenas!(a_plot2)
    for i in 1:K
        plot!(bloques[i], A[i]*X[i] .+ B[i], color = 1, label =:none)
    end
    a_plot2
end

begin
    a_plot = plot(title = "Aproximación lineal por trozos")
    plot!( timestamp(mov_google_movmean),
        [zeros(21); frac_outbreak[1:220]],
        color = :black,
        fill = (0, 1., :black),
        label = :none,
        grid = false
    )
    plot_fechas_clave_cuarentenas!(a_plot, label = :none, color = :red)

    tx = twinx(a_plot)
    plot!(tx, mov_google_movmean[:trabajo], alpha = 0.3)
    plot!(tx,bloques[1], A[1]*X[1] .+ B[1], color = 1, label ="aprox")
    for i in 2:K
        plot!(tx,bloques[i], A[i]*X[i] .+ B[i], color = 1, label =:none)
    end
    a_plot
end
```
weave(filename, out_path = :pwd, doctype = "md2html")
Definimos ahora una serie de tiempo para poder comparar
```julia
time_stamp_linear = bloq1[1]:Dates.Day(1):bloq5[end]
length(time_stamp_linear)

data_LR = zeros(length(time_stamp_linear),6)

largos = length.(bloques)
largos_acu = [1,largos[1], sum(largos[1:2])-1, sum(largos[1:3])-2, sum(largos[1:4])-3, sum(largos[1:5])-4]

for j in 1:length(ambientes)
    for i in 1:5
        X, A, B = calcular_aprox(ambientes[j], K)
        data_LR[largos_acu[i]:largos_acu[i+1], j] = A[i]*X[i] .+ B[i]
    end
end

LR = TimeArray(time_stamp_linear,
    data_LR,
    colnames(mov_google_movmean)
);
```
Graficamos la serie de tiempo aproximada
```{julia; fig_ext=".svg"}
begin
    a_plot = plot(title = "Aproximación lineal por trozos")
    plot!( timestamp(mov_google_movmean),
        [zeros(21); frac_outbreak[1:220]],
        color = :black,
        fill = (0, 1., :black),
        label = :none,
        grid = false
    )
    plot_fechas_clave_cuarentenas!(a_plot, label = :none, color = :red)

    tx = twinx(a_plot)

    plot_comparar_movilidad!(tx, mov_google_movmean , LR)

    a_plot

end
using CSV
CSV.write("LinearReg.csv", LR)

```

Quiero ver mejor cómo se comporta la cantidad de personas en cuarenten
```{julia; fig_ext=".svg"}
#range = Date(2020,3,1):Dates.Month(2):Date(2020,9,1)

plot(title = "Recreación")
for i in 1:(length(fechas_clave)-1)
    scatter!(frac_cuarentena, values(mov_google_movmean[:recreacion][fechas_clave[i:i+1]]))
end
plot!(xlabel = "Fracción de personas en cuarentena",
    ylabel = "Porcentaje de variación c/r a la línea base"
)
```
